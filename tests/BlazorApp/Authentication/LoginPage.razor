@page "/authentication/login"

@using System.ComponentModel.DataAnnotations;
@using HanyCo.Infra.Security.Identity;
@using HanyCo.Infra.Security.Client.Providers;

@layout MainLayout
@inject NavigationManager Nav;
@inject CustomAuthenticationStateProvider _authenticator;

<PageTitle>@("MES") - Login</PageTitle>

<h1>
    Login
</h1>
@if (!ErrorMessage.IsNullOrEmpty())
{
    <div class="container alert alert-danger">
        <p>
            @ErrorMessage
        </p>
    </div>

}
<EditForm OnValidSubmit='SaveDataAsync' Model='@this.DataContext'>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <button type="submit" class="btn btn-primary" disabled="@isProcessing">Login</button>
    <button class="btn btn-secondary" disabled="@isProcessing">Back</button>
    <hr />
    <div class="row mb-3">
        <label for="inputUserName" class="col-sm-2 col-form-label">User Name</label>
        <div class="col-sm-10">
            <InputText id='inputUserName' name='inputUserName' class='col-5' @bind-Value='this.DataContext.UserName' disabled="@isProcessing" />
            <ValidationMessage For="@(() => this.DataContext.UserName)" Class="error-message" />
        </div>
    </div>
    <div class="row mb-3">
        <label for="inputPassword" class="col-sm-2 col-form-label">Password</label>
        <div class="col-sm-10">
            <InputText type="password" id='inputPassword' name='inputPassword' class='col-5' @bind-Value='this.DataContext.Password' disabled="@isProcessing" />
            <ValidationMessage For="@(() => this.DataContext.Password)" Class="error-message" />
        </div>
    </div>
</EditForm>
@code
{
    private bool isProcessing = false;
    public string? ErrorMessage { get; set; }
    LoginPageViewModel DataContext { get; set; } = new();

    async Task SaveDataAsync()
    {
        if (isProcessing)
            return;
        isProcessing = true;
        var loginResult = await _authenticator.LogInAsync(this.DataContext.UserName, this.DataContext.Password, this.DataContext.IsPersist);
        if (loginResult.IsSucceed)
            Nav.NavigateTo(string.Empty, forceLoad: false);
        else
            this.ErrorMessage = loginResult.Status.Cast().As<Exception>().Message;
        isProcessing = false;
        await Task.CompletedTask;
    }

    sealed class LoginPageViewModel
    {
        [Required]
        public string UserName { get; set; }
        [Required]
        public string Password { get; set; }
        public bool IsPersist { get; set; }
    }
}