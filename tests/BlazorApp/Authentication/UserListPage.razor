@using HanyCo.Infra.Security.Identity.Model;
@using HanyCo.Infra.Security.Model;
@using HanyCo.Infra.Security.Identity;
@using HanyCo.Infra.Services;

@attribute [Authorize(Policy = InfraIdentityValues.PolicyCanViewSystemEntities)]
@page "/authentication/users"
@layout MainLayout

@inject NavigationManager _Navigator;
@inject ISecurityService _UserManager;

<PageTitle>MES User Management - List</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="div">
            <AuthorizeView Policy=@InfraIdentityValues.PolicyCanCrudSystemEntities>
                <Authorized Context="AuthorizedToCreate">
                    <button type="button" class="btn btn-primary" @onclick="@NewUser">New</button>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
    <div class="row">
        <div class="col">
            @if (this.DataContext.Any())
            {
                <MyGrid Items="@DataContext">
                    <GridHeader>
                        <th>Id</th>
                        <th>User Name</th>
                        <th>Mail</th>
                        <th></th>
                        <th></th>
                    </GridHeader>
                    <GridRow>
                        <td>@context.Id</td>
                        <td>@context.UserName</td>
                        <td>@context.Email</td>
                        <td>
                            <AuthorizeView Policy=@InfraIdentityValues.PolicyCanCrudSystemEntities>
                                <Authorized Context="AuthorizedToEdit">
                                    <button class="btn btn-primary" @onclick="@(() => EditUser(context.Id))">Edit</button>
                                    <button class="btn btn-primary" @onclick="@(() => DeleteUser(context.Id))">Delete</button>
                                </Authorized>
                            </AuthorizeView>
                        </td>
                    </GridRow>
                </MyGrid>
            }
            else
            {
                <div class="container text-center">
                    <h2>No user found.</h2>
                </div>
            }
        </div>

    </div>
</div>

@code {
    private readonly List<UserInfo> DataContext = new List<UserInfo>();
    protected override Task OnInitializedAsync()
    {
        var users = _UserManager.GetUsers().Select(user => new UserInfo
            {
                Id = user.Id.ToString(),
                Email = user.Email,
                UserName = user.UserName
            });
        DataContext.AddRange(users);
        return Task.CompletedTask;
    }
    private void NewUser()
    {
        _Navigator.NavigateTo("/authentication/user");
    }
    private void EditUser(string userId)
    {
        _Navigator.NavigateTo($"/authentication/users/{userId}");
    }
    private void DeleteUser(string userId)
    {

    }
    public class UserInfo
    {
        public string Id { get; set; }
        public string Email { get; set; }
        public string UserName { get; set; }
    }
}
