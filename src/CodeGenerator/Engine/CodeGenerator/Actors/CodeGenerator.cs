using HanyCo.Infra.CodeGeneration.CodeGenerator.Actors;
using HanyCo.Infra.CodeGeneration.CodeGenerator.Interfaces;
using HanyCo.Infra.CodeGeneration.CodeGenerator.Models.Components;
using HanyCo.Infra.CodeGeneration.CodeGenerator.Strategies.CodeDom;

using Library.CodeGeneration.Models;
using Library.Validations;

namespace HanyCo.Infra.CodeGeneration.CodeGenerator.Actors;

public static class CodeGenerator
{
    /// <summary>
    ///     Generates the code.
    /// </summary>
    /// <param name="query">The query.</param>
    /// <returns></returns>
    public static Codes GenerateCode(this ICodeGenCqrsModel query)
    {
        Check.MustBeNotNull(query);
        return CqrsCodeCompileUnitCreatorEngine.Create(query)
                        .Select(cg =>
                        {
                            var code = cg.GenerateCode();
                            if (!code.IsPartial)
                            {
                                code = code.WithStatement(code.Statement.Remove(value: """
                                                                            //------------------------------------------------------------------------------
                                                                            // <auto-generated>
                                                                            //     This code was generated by a tool.
                                                                            //
                                                                            //     Changes to this file may cause incorrect behavior and will be lost if
                                                                            //     the code is regenerated.
                                                                            // </auto-generated>
                                                                            //------------------------------------------------------------------------------
                                                                            """)!);
                            }

                            return code.With(x => x.props().Category = cg.props().Category);
                        }).ToCodes();
    }

    public static Code GenerateCode(this CodeGenDto dto, string? nameSpace = null)
    {
        var generator = CqrsCodeCompileUnitCreatorEngine.Create(dto, nameSpace);
        var code = generator.GenerateCode();
        return code;
    }
}
