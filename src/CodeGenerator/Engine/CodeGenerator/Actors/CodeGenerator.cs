using HanyCo.Infra.CodeGeneration.CodeGenerator.Actors;
using HanyCo.Infra.CodeGeneration.CodeGenerator.Interfaces;
using HanyCo.Infra.CodeGeneration.CodeGenerator.Models.Components;
using HanyCo.Infra.CodeGeneration.CodeGenerator.Strageries.CodeDom;
using HanyCo.Infra.CodeGeneration.FormGenerator.Bases;

using Library.CodeGeneration.Models;
using Library.Validations;

namespace HanyCo.Infra.CodeGeneration.CodeGenerator.Actors;

public static class CodeGenerator
{
    /// <summary>
    ///     Generates the code.
    /// </summary>
    /// <param name="query">The query.</param>
    /// <returns></returns>
    public static Codes GenerateCode(this ICodeGenCqrsModel query)
    {
        _ = query.ArgumentNotNull(nameof(query));
        var codeData = CqrsCodeCompileUnitCreatorEngine.Create(query)
                        .Select(cg =>
                        {
                            ICodeGeneratorUnit worker = (ICodeGeneratorUnit)cg;
                            var code = worker.GenerateCode();
                            if (!code.IsPartial)
                            {
                                code = code with
                                {
                                    Statement = code.Statement.Remove(value: """
                                                                            //------------------------------------------------------------------------------
                                                                            // <auto-generated>
                                                                            //     This code was generated by a tool.
                                                                            //
                                                                            //     Changes to this file may cause incorrect behavior and will be lost if
                                                                            //     the code is regenerated.
                                                                            // </auto-generated>
                                                                            //------------------------------------------------------------------------------
                                                                            """)!
                                };
                            }

                            return (code.Name, code, code.IsPartial);
                        });
        var codes = codeData.Select(x => new Code(x.Name, Languages.CSharp, x.code!, x.IsPartial));
        return codes.ToList().ToCodes();
    }

    public static Code GenerateCode(this CodeGenDto dto, string? nameSpace = null)
    {
        var generator = CqrsCodeCompileUnitCreatorEngine.Create(dto, nameSpace);
        var code = generator.GenerateCode();
        return code;
    }
}
