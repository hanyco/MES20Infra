@using Blazored.LocalStorage
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigation

@if (isAuthenticated)
{
    <span>Hello, @userName!</span>
    <button class="btn btn-link" @onclick="Logout">Log out</button>
}
else
{
    <a href="login">Login</a>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span>
    <a href="register">Register</a>
}

@code {
    private bool isAuthenticated;
    private string? userName;
    private string? lastToken;

    private void Logout()
    {
        _localStorage.RemoveItemAsync("authToken");
        _navigation.NavigateTo("login");
    }

    private string? GetUserNameFromToken(string token)
    {
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claim = jwtToken.Claims.FirstOrDefault(c => c.Type == "full_name");
        if (claim?.Value?.IsNullOrEmpty() is not false)
        {
            claim = jwtToken.Claims.FirstOrDefault(c => c.Type == "sub");
        }
        return claim?.Value;
    }

    private bool IsTokenExpired(string token)
    {
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var expiration = jwtToken.Claims.FirstOrDefault(c => c.Type == "exp")?.Value;

        if (expiration != null && long.TryParse(expiration, out var expUnix))
        {
            var expirationDate = DateTimeOffset.FromUnixTimeSeconds(expUnix).UtcDateTime;
            return expirationDate < DateTime.UtcNow;
        }
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var token = await _localStorage.GetItemAsync<string>("authToken");
        if (firstRender || token != lastToken)
        {
            lastToken = token;

            if (!string.IsNullOrEmpty(token) && !IsTokenExpired(token))
            {
                isAuthenticated = true;
                userName = GetUserNameFromToken(token);
            }
            else
            {
                isAuthenticated = false;
                await _localStorage.RemoveItemAsync("authToken");
                _navigation.NavigateTo("login");
            }

            StateHasChanged();
        }
    }
}
