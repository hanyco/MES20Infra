@page "/login"

@using Blazored.LocalStorage
@using Domain.Dtos
@using System.Net

@inject HttpClient _http
@inject NavigationManager _navigation
@inject ILocalStorageService _localStorage

<PageTitle>Login</PageTitle>

<div class="login-container bg-light">
    <div class="card p-4 shadow-sm mx-auto" style="max-width: 400px; width: 100%;">
        <h3 class="text-center mb-4">Login</h3>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.UserName" placeholder="Enter your username" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? ErrorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await _http.PostAsJsonAsync("identity/token", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TokenResponse>();

                if (result != null && !string.IsNullOrEmpty(result.JWToken))
                {
                    await _localStorage.SetItemAsync("authToken", result.JWToken);

                    _navigation.NavigateTo("/", true);
                }
            }
            else
            {
                if (response.StatusCode == HttpStatusCode.Unauthorized)
                {
                    ErrorMessage = $"Invalid username or password.";
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    if (errorMessage is not null)
                    {
                        ErrorMessage = $"Invalid login attempt ({response.StatusCode}). Error: {errorMessage}";
                    }
                    else
                    {
                        ErrorMessage = $"Invalid login attempt ({response.StatusCode}).";
                    }
                }
            }
            //this.StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class TokenResponse
    {
        public string Id { get; set; } = string.Empty;
        public string JWToken { get; set; } = string.Empty;
        public DateTime IssuedOn { get; set; }
        public DateTime ExpiresOn { get; set; }
        public string Email { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string RefreshToken { get; set; } = string.Empty;
    }
}
