@page "/login"

@using Blazored.LocalStorage
@using Domain.Dtos
@using System.Net

@inject HttpClient _http
@inject NavigationManager _navigation
@inject ILocalStorageService _localStorage

<PageTitle>Login</PageTitle>

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.UserName" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string? ErrorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await _http.PostAsJsonAsync("identity/token", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TokenResponse>();

                if (result != null && !string.IsNullOrEmpty(result.JWToken))
                {
                    await _localStorage.SetItemAsync("authToken", result.JWToken);

                    _navigation.NavigateTo("/");
                }
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ApiErrorResponse>();
                if (error is not null)
                {
                    ErrorMessage = $"Invalid login attempt ({(HttpStatusCode)error.ErrorCode}). Error: {error.Message}";
                }
                else
                {
                    ErrorMessage = $"Invalid login attempt.";
                }
            }
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class TokenResponse
    {
        public string Id { get; set; } = string.Empty;
        public string JWToken { get; set; } = string.Empty;
        public DateTime IssuedOn { get; set; }
        public DateTime ExpiresOn { get; set; }
        public string Email { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string RefreshToken { get; set; } = string.Empty;
    }
}
