@page "/edit-user"
@page "/edit-user/{userId}"
@using Application.DTOs.Identity
@using Blazored.LocalStorage
@using Library.Results
@using Library.Validations
@using Web.UI.Helpers
@using Web.UI.Services
@inject NavigationManager _navigation
@inject ApiClientService _api;

<h3>User Details</h3>

<EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>User Name</label>
        <InputText @bind-Value="user.UserName" class="form-control" />
    </div>
    <div class="form-group">
        <label>Display Name</label>
        <InputText @bind-Value="user.DisplayName" class="form-control" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="user.Email" class="form-control" />
    </div>
    <div class="form-group">
        <label>Phone Number</label>
        <InputText @bind-Value="user.PhoneNumber" class="form-control" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="user.Password" class="form-control" type="password" />
    </div>
    <div class="form-group">
        <label>Confirm Password</label>
        <InputText @bind-Value="confirmPassword" class="form-control" type="password" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <button type="submit" class="btn btn-primary" disabled="@isSubmitDisabled">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="BackToList">Cancel</button>
</EditForm>


@code {
    [Parameter] public string userId { get; set; } = null!;
    private UpdateRequest user = null!;
    private string? confirmPassword;
    private string? errorMessage;
    private bool isSubmitDisabled = false;


    protected async override Task OnInitializedAsync()
    {
        // New user
        if (userId.IsNullOrEmpty())
        {
            this.user = new();
            return;
        }

        // Edit user
        (user, var isValid, errorMessage) = await _api.SendApiRequestAsync<UpdateRequest>($"Identity/users/{userId}")
            .ProcessResult(_navigation)
            .HandleApiResponse("User not found or you are not authorized to view this user.");
        isSubmitDisabled = !isValid;

        // try
        // {
        //     var buffer = await _api.SendApiRequestAsync<UpdateRequest>($"Identity/users/{userId}");

        //     if (buffer.IsSucceed)
        //     {
        //         this.user = buffer.NotNull().Value.NotNull();
        //     }
        //     else
        //     {
        //         errorMessage = "Failed to load user information.";
        //     }
        //     StateHasChanged();
        // }
        // catch (Exception ex)
        // {
        //     errorMessage = $"An error occurred: {ex.Message}";
        //     Console.WriteLine($"Error during StateHasChanged: {ex.Message}");
        // }
    }


    private async Task HandleValidSubmit()
    {
        if (isSubmitDisabled)
        {
            errorMessage = "Sorry! Can not submit any request.";
            return;
        }
        if (user.Password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var method = !userId.IsNullOrEmpty() ? HttpMethod.Put : HttpMethod.Post;
        var (isOk, result) = await _api.SendApiRequestWithoutResponseAsync("Identity", method, user).ProcessResult(_navigation);
        if (isOk)
        {
            _navigation.NavigateTo("/users");
            return;
        }
        errorMessage = result.ErrorMessage;
    }

    private void BackToList()
    {
        _navigation.NavigateTo("/users");
    }
}