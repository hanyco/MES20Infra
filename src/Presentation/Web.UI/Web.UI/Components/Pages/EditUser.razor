@page "/edit-user"
@page "/edit-user/{userId}"
@using Application.DTOs.Identity
@using Blazored.LocalStorage
@using Web.UI.Helpers
@* @inject HttpClient Http *@
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage;

<h3>User Details</h3>

<EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>User Name</label>
        <InputText @bind-Value="user.UserName" class="form-control" />
    </div>
    <div class="form-group">
        <label>Display Name</label>
        <InputText @bind-Value="user.DisplayName" class="form-control" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="user.Email" class="form-control" />
    </div>
    <div class="form-group">
        <label>Phone Number</label>
        <InputText @bind-Value="user.PhoneNumber" class="form-control" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="user.Password" class="form-control" type="password" />
    </div>
    <div class="form-group">
        <label>Confirm Password</label>
        <InputText @bind-Value="confirmPassword" class="form-control" type="password" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <button type="submit" class="btn btn-primary" disabled="@isSubmitDisabled">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="BackToList">Cancel</button>
</EditForm>


@code {
    [Parameter] public string userId { get; set; } = null!;
    private UpdateRequest? user = null;
    private string? confirmPassword;
    private string? errorMessage;
    private bool isSubmitDisabled = false;


    protected override async Task OnInitializedAsync()
    {
        var Http = httpClientFactory.CreateClient("ApiClient");
        if (!userId.IsNullOrEmpty())
        {
            user = await Http.SendApiRequestAsync<UpdateRequest>(LocalStorage, Navigation, $"Identity/users/{userId}");
            if (user == null)
            {
                errorMessage = "User not found or you are not authorized to view this user.";
                isSubmitDisabled = true;
                user = new();
            }
        }
        else
        {
            user = new();
        }
    }


    private async Task HandleValidSubmit()
    {
        if (isSubmitDisabled)
        {
            errorMessage = "Sorry! Can not submit any request.";
            return;
        }
        if (user.Password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        errorMessage = null;

        HttpResponseMessage response;
        if (!userId.IsNullOrEmpty())
        {
            response = await Http.SendApiRequestWithoutResponseAsync(LocalStorage, Navigation, "Identity/update", HttpMethod.Put, user);
        }
        else
        {
            response = await Http.SendApiRequestWithoutResponseAsync(LocalStorage, Navigation, "Identity/update", HttpMethod.Post, user);
        }

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/users");
        }
        else
        {
            // Handle error
        }
    }

    private void BackToList()
    {
        Navigation.NavigateTo("/users");
    }
}