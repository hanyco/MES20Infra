@page "/edit-user"
@page "/edit-user/{userId}"
@using Application.DTOs.Identity
@using Blazored.LocalStorage
@using Library.Results
@using Library.Validations
@using Web.UI.Helpers
@using Web.UI.Services
@inject NavigationManager _navigation
@inject ApiClientService _api;


<h3 class="text-center mb-4">User Details</h3>

@if (!_isInitialized)
{
    <p class="text-center"><em>Loading...</em></p>
}
else
{
    <div class="container d-flex justify-content-center">
        <div class="card p-4 shadow" style="max-width: 500px; width: 100%;">
            <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label>Display Name</label>
                    <InputText @bind-Value="user.DisplayName" class="form-control" placeholder="Enter display name" />
                </div>

                <div class="form-group mb-3">
                    <label>Email</label>
                    <InputText @bind-Value="user.Email" class="form-control" placeholder="Enter email" />
                </div>

                <div class="form-group mb-3">
                    <label>Phone Number</label>
                    <InputText @bind-Value="user.PhoneNumber" class="form-control" placeholder="Enter phone number" />
                </div>

                <div class="form-group mb-3">
                    <label>User Name</label>
                    <InputText @bind-Value="user.UserName" class="form-control" placeholder="Enter username" />
                </div>

                <div class="form-group mb-3">
                    <label>Password</label>
                    <InputText @bind-Value="user.Password" class="form-control" type="password" placeholder="Enter new password" />
                </div>

                <div class="form-group mb-3">
                    <label>Confirm Password</label>
                    <InputText @bind-Value="confirmPassword" class="form-control" type="password" placeholder="Confirm password" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger text-center">@errorMessage</div>
                }

                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-secondary" @onclick="BackToList">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@isSubmitDisabled">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
}
@code {
    [Parameter] public string userId { get; set; } = null!;
    private UpdateRequest user = null!;
    private string? confirmPassword;
    private string? errorMessage;
    private bool isSubmitDisabled = false;
    private bool _isInitialized = false;

    protected override void OnInitialized()
    {
        user = new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            if (!string.IsNullOrEmpty(userId))
            {
                // Edit user
                (user, var isValid, errorMessage) = await _api.SendApiRequestAsync<UpdateRequest>($"Identity/users/{userId}")
                    .ProcessResult(_navigation)
                    .HandleApiResponse("User not found or you are not authorized to view this user.");
                isSubmitDisabled = !isValid;
            }
                       

            _isInitialized = true;
            StateHasChanged(); // به‌روزرسانی پس از اولین بارگذاری
        }
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitDisabled)
        {
            errorMessage = "Sorry! Can not submit any request.";
            return;
        }
        if (user.Password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var method = !userId.IsNullOrEmpty() ? HttpMethod.Put : HttpMethod.Post;
        var (isOk, result) = await _api.SendApiRequestWithoutResponseAsync("Identity", method, user)
            .ProcessResult(_navigation);
        if (isOk)
        {
            _navigation.NavigateTo("/users");
            return;
        }
        errorMessage = result.ErrorMessage;
    }

    private void BackToList()
    {
        _navigation.NavigateTo("/users");
    }
}