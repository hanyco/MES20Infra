@page "/users"
@using Application.DTOs.Identity
@using Blazored.LocalStorage
@using Library.Validations
@using Web.UI.Helpers
@using Web.UI.Services
@inject NavigationManager _navigation
@inject ApiClientService _api;

<h3>User Management</h3>

@if (!_isInitialized)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="() => NewUser()">New</button>
    <table class="table">
        <thead>
            <tr>
                <th>Display Name</th>
                <th>User Name</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.DisplayName</td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditUser(user.UserId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.UserId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserInfoExResponse>? users;
    private string? errorMessage;
    private bool _isInitialized = false;

    protected override void OnInitialized()
    {
        users = [];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            var apiResponse = await _api.SendApiRequestAsync<List<UserInfoExResponse>>("Identity/users")
                .ProcessResult(_navigation);
            if (apiResponse.IsFailure)
            {
                if (apiResponse.Exception is HttpRequestException exception && exception.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    _navigation.NavigateTo("/login");
                }
                else
                {
                    errorMessage = apiResponse.Message;
                }
                return;
            }
            users = apiResponse.GetResponse();
            _isInitialized = true;
            StateHasChanged();
        }
    }


    private void EditUser(string userId)
    {
        _navigation.NavigateTo($"/edit-user/{userId}", forceLoad: true);
    }

    private void NewUser()
    {
        _navigation.NavigateTo($"/edit-user");
    }

    private async Task DeleteUser(string userId)
    {
        userId.NotNull(() => "No user selected");
        var response = await _api.SendApiRequestWithoutResponseAsync($"Identity/remove/{userId}", HttpMethod.Delete)
            .ProcessResult(_navigation)
            .GetResponse();
        if (response?.IsSuccessStatusCode is true)
        {
            users = users?.Where(u => u.UserId != userId).ToList();
        }
    }
}
