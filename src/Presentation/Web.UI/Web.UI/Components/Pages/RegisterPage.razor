@page "/register"
@using Blazored.LocalStorage
@using Domain.Dtos
@using Web.UI.ViewModels
@inject HttpClient _http
@inject NavigationManager _navigation
@inject ILocalStorageService _localStorage

<h3 class="text-center mb-4">Register</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger text-center">@ErrorMessage</div>
}

<div class="container d-flex justify-content-center">
    <div class="card p-4 shadow" style="max-width: 500px; width: 100%;">
        <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="registerModel.UserName" placeholder="Enter your username" />
            </div>

            <div class="form-group mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" placeholder="Enter your email" />
            </div>

            <div class="form-group mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Enter your password" />
            </div>

            <div class="form-group mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirm your password" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string? ErrorMessage;

    private async Task HandleRegistration()
    {
        try
        {
            var response = await _http.PostAsJsonAsync("identity/register", registerModel);
            if (response.IsSuccessStatusCode)
            {
                _navigation.NavigateTo("/login");
            }
            else
            {
                var result = await response.Content.ReadFromJsonAsync<ApiErrorResponse>();
                ErrorMessage = result?.Message ?? "Registration failed.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }
}
