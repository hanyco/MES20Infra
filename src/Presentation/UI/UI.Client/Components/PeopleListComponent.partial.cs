//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace HumanResources.Dtos
{
    using HumanResource.Mapper;
    using HumanResource.Queries;
    using HumanResource.Dtos;
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Library.DesignPatterns.Behavioral.Observation;
    using Microsoft.Extensions.Caching.Memory;
    using Library.Interfaces;

    public sealed partial class PeopleListComponent
    {
        public PeopleListComponent()
        {
        }

        public void NewButton_OnClick()
        {
            this._navigationManager.NavigateTo("/HumanResources/Person/details");
        }

        public void EditButton_OnClick(Int64 id)
        {
            this._navigationManager.NavigateTo($"/HumanResources/Person/details/{id.ToString()}");
        }

        public async void DeleteButton_OnClick(Int64 id)
        {
            // Setup segregation parameters
            var cmdParams = new HumanResource.Dtos.DeletePerson()
            {
                Id = id,
            };
            var cmd = new HumanResource.Dtos.DeletePersonCommand(cmdParams);
            // Invoke the command handler to apply changes.
            var cqResult = await this._commandProcessor.ExecuteAsync<HumanResource.Dtos.DeletePersonCommand, HumanResource.Dtos.DeletePersonCommandResult>(cmd);
            // Now, set let UI know that the state is changed
            await OnInitializedAsync();
            MessageComponent.Show("Delete Entity", "Entity deleted.");
            this.StateHasChanged();
        }

        protected override async Task OnInitializedAsync()
        {
            // Setup segregation parameters
            var @params = new HumanResource.Dtos.GetAllPeopleQuery();
            var cqParams = new HumanResource.Dtos.GetAllPeopleQuery(@params);
            // Invoke the query handler to retrieve all entities
            var cqResult = await this._queryProcessor.ExecuteAsync<HumanResource.Dtos.GetAllPeopleQueryResult>(cqParams);
            // Now, set the data context.
            this.DataContext = cqResult.Result.ToViewModel();
            // Call developer's method.
            await this.OnLoadAsync();
        }

        public BlazorApp.Shared.MessageComponent MessageComponent { get; set; }
    }
}